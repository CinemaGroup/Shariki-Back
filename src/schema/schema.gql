# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthLoginInput {
  email: String!
  password: String!
}

input AuthRegisterInput {
  email: String!
  login: String!
  password: String!
}

type AuthResponse {
  user: User!
}

type Billing {
  address: String!
  city: String!
  createdAt: DateTime!
  firstName: String!
  id: Int!
  phone: String!
  profile: Profile!
  profileId: Int!
  updatedAt: DateTime!
}

type Category {
  categories: [Category!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  parent: Category
  parentId: Int
  products: [Product!]!
  slug: String!
  status: Status!
  updatedAt: DateTime!
}

input CategoryInput {
  name: String!
  parent: SelectInput
}

type Characteristic {
  createdAt: DateTime!
  id: Int!
  name: String!
  product: Product!
  productId: Int!
  slug: String!
  type: CharacteristicType!
  updatedAt: DateTime!
}

input CharacteristicInput {
  name: String!
  type: CharacteristicSelectInput!
}

input CharacteristicSelectInput {
  name: String!
  value: CharacteristicType!
}

enum CharacteristicType {
  COLLECTION
  COUNTRY
  HUE
  MANUFACTURER
  MATERIAL
}

type Color {
  color: String!
  createdAt: DateTime!
  id: Int!
  images: [String!]!
  product: Product!
  productId: Int!
  updatedAt: DateTime!
}

input ColorInput {
  color: String!
  images: [String!]!
}

input CreateFolderInput {
  folderPath: String!
  name: String!
}

type CurrentProduct {
  product: Product
  similarProducts: [Product!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value conforms to the standard DeweyDecimal format as specified by the OCLC https://www.oclc.org/content/dam/oclc/dewey/resources/summaries/deweysummaries.pdf
"""
scalar DeweyDecimal @specifiedBy(url: "https://www.oclc.org/content/dam/oclc/dewey/resources/summaries/deweysummaries.pdf")

input EditFileOrFolderNameInput {
  newPath: String!
  oldPath: String!
}

type File {
  createdAt: DateTime!
  extension: String!
  name: String!
  path: String!
  size: String!
}

type Folder {
  count: Int!
  createdAt: DateTime!
  name: String!
  path: String!
  size: String!
}

type FolderWithChild {
  childrens: [FolderWithChild!]!
  createdAt: DateTime!
  name: String!
  path: String!
}

type Holiday {
  createdAt: DateTime!
  id: Int!
  imagePath: String!
  name: String!
  products: [Product!]!
  slug: String!
  status: Status!
  updatedAt: DateTime!
}

input HolidayInput {
  imagePath: String!
  name: String!
}

type Mutation {
  createCategory: Category!
  createCharacteristic: Characteristic!
  createFolder(data: CreateFolderInput!): String!
  createHoliday: Holiday!
  createPost: Post!
  createProduct: Product!
  createReview: Review!
  createTag: Tag!
  createType: Type!
  deleteCategory(id: Int!): Category!
  deleteCharacteristic(id: Int!): Characteristic!
  deleteFileOrFolder(path: String!): String!
  deleteHoliday(id: Int!): Holiday!
  deletePost(id: Int!): Post!
  deleteProduct(id: Int!): Product!
  deleteReview(id: Int!): Review!
  deleteTag(id: Int!): Tag!
  deleteType(id: Int!): Type!
  duplicateCategory(id: Int!): Category!
  duplicateCharacteristic(id: Int!): Characteristic!
  duplicateHoliday(id: Int!): Holiday!
  duplicateProduct(id: Int!): Product!
  duplicateTag(id: Int!): Tag!
  duplicateType(id: Int!): Type!
  editFileOrFolderName(data: EditFileOrFolderNameInput!): String!
  login(data: AuthLoginInput!): AuthResponse!
  logout: Boolean!
  register(data: AuthRegisterInput!): AuthResponse!
  toggleCategory(id: Int!): Category!
  toggleCharacteristic(id: Int!): Characteristic!
  toggleHoliday(id: Int!): Holiday!
  togglePost(id: Int!): Post!
  toggleProduct(id: Int!): Product!
  toggleReview(id: Int!): Review!
  toggleTag(id: Int!): Tag!
  toggleType(id: Int!): Type!
  updateCategory(data: CategoryInput!, id: Int!): Category!
  updateCharacteristic(data: CharacteristicInput!, id: Int!): Characteristic!
  updateHoliday(data: HolidayInput!, id: Int!): Holiday!
  updatePost(data: PostInput!, id: Int!): Post!
  updateProduct(data: ProductInput!, id: Int!): Product!
  updateReview(data: ReviewInput!, id: Int!): Review!
  updateTag(data: TagInput!, id: Int!): Tag!
  updateType(data: TypeInput!, id: Int!): Type!
  uploadFiles(data: UploadFilesInput!): String!
}

type Order {
  createdAt: DateTime!
  id: Int!
  items: [OrderItem!]!
  method: PaymentMethod!
  status: OrderStatus!
  total: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type OrderItem {
  createdAt: DateTime!
  id: Int!
  oldPrice: Float
  order: Order!
  orderId: Int!
  price: Float!
  product: Product!
  productId: Int!
  quantity: Int!
  updatedAt: DateTime!
}

enum OrderStatus {
  CANCELED
  COMPLETED
  IN_PROCESS
  ON_HOLD
  PENDING
  REFUNDED
}

enum PaymentMethod {
  YOOKASSA
}

type Post {
  bigPoster: String!
  createdAt: DateTime!
  description: String!
  excerpt: String!
  id: Int!
  name: String!
  poster: String!
  rubrics: [Rubric!]!
  slug: String!
  status: Status!
  updatedAt: DateTime!
}

input PostInput {
  bigPoster: String!
  description: String!
  excerpt: String!
  name: String!
  poster: String!
  rubrics: [Int!]!
}

type Product {
  boughtTimes: Int!
  categories: [Category!]!
  characteristics: [Characteristic!]!
  colors: [Color!]!
  createdAt: DateTime!
  description: String!
  holidays: [Holiday!]!
  iconPath: String
  id: Int!
  images: [String!]!
  name: String!
  oldPrice: DeweyDecimal
  orderItems: [OrderItem!]!
  packageQuantity: Int!
  price: DeweyDecimal!
  sizes: [Size!]!
  sku: String!
  slug: String!
  status: Status!
  tags: [Tag!]!
  typeId: Int!
  types: [Type!]!
  updatedAt: DateTime!
  views: Int!
}

input ProductInput {
  categories: [SelectInput!]!
  characteristics: [SelectInput!]!
  colors: [ColorInput!]!
  description: String!
  holidays: [SelectInput!]!
  iconPath: String
  name: String!
  oldPrice: String
  packageQuantity: String!
  price: String!
  sizes: [SizeInput!]!
  sku: String!
  tags: [SelectInput!]!
  types: [SelectInput!]!
}

type Profile {
  avatarPath: String!
  billing: Billing!
  createdAt: DateTime!
  email: String!
  id: Int!
  login: String!
  password: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type ProfileResponse {
  user: User!
}

type Query {
  categories(query: QueryInput!): [Category!]!
  categoryById(id: Int!): Category!
  characteristicById(id: Int!): Characteristic!
  characteristics(query: QueryInput!): [Characteristic!]!
  folderItems(folderPath: String!): StorageItem!
  folders: [FolderWithChild!]!
  holidayById(id: Int!): Holiday!
  holidays(query: QueryInput!): [Holiday!]!
  postById(id: Int!): Post!
  posts(query: QueryInput!): [Post!]!
  productById(id: Int!): Product!
  productBySlug(slug: String!): CurrentProduct!
  products(isSale: Boolean, query: QueryProductInput!): [Product!]!
  profile: ProfileResponse!
  reviewById(id: Int!): Review!
  reviews(query: QueryInput!): [Review!]!
  tagById(id: Int!): Tag!
  tags(query: QueryInput!): [Tag!]!
  typeById(id: Int!): Type!
  types(query: QueryInput!): [Type!]!
  users: [User!]!
}

input QueryInput {
  page: String
  perPage: String
  searchTerm: String
  sort: Sort!
  status: Status
}

input QueryProductInput {
  page: String
  perPage: String
  searchTerm: String
  sort: Sort!
  status: Status
}

type Review {
  author: String!
  content: String!
  createdAt: DateTime!
  id: Int!
  photo: String!
  status: Status!
  updatedAt: DateTime!
}

input ReviewInput {
  author: String!
  content: String!
  photo: String!
}

type Rubric {
  createdAt: DateTime!
  id: Int!
  name: String!
  posts: [Post!]!
  slug: String!
  status: Status!
  updatedAt: DateTime!
}

input SelectInput {
  name: String!
  value: Int!
}

type Size {
  createdAt: DateTime!
  id: Int!
  oldPrice: DeweyDecimal
  price: DeweyDecimal!
  product: Product!
  productId: Int!
  size: String!
  updatedAt: DateTime!
}

input SizeInput {
  oldPrice: String
  price: String!
  size: String!
}

enum Sort {
  NEWEST
  OLDEST
}

enum Status {
  HIDDEN
  PUBLISHED
}

type StorageItem {
  files: [File!]!
  folders: [Folder!]!
}

type Tag {
  createdAt: DateTime!
  id: Int!
  imagePath: String!
  name: String!
  products: [Product!]!
  slug: String!
  status: Status!
  updatedAt: DateTime!
}

input TagInput {
  imagePath: String!
  name: String!
}

type Type {
  createdAt: DateTime!
  iconPath: String!
  id: Int!
  name: String!
  products: [Product!]!
  slug: String!
  status: Status!
  updatedAt: DateTime!
}

input TypeInput {
  iconPath: String!
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFilesInput {
  data: [Upload!]!
  folderPath: String!
}

type User {
  createdAt: DateTime!
  id: Int!
  isVerified: Boolean!
  orders: [Order!]!
  profile: Profile!
  role: UserRole!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  USER
}