generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER

  @@map("user_role")
}

enum PaymentMethod {
  YOOKASSA

  @@map("payment_method")
}

enum Status {
  PUBLISHED
  HIDDEN

  @@map("status")
}

enum CharacteristicType {
  HUE
  MANUFACTURER
  MATERIAL
  COUNTRY
  COLLECTION
  COLOR

  @@map("characteristics_type")
}

enum OrderStatus {
  PENDING
  IN_PROCESS
  COMPLETED
  CANCELED
  ON_HOLD
  REFUNDED

  @@map("order_status")
}

enum BlockType {
  HOME_FIRST
  HOME_SECOND
  HOME_THIRD

  @@map("block_type")
}

enum PageType {
  HOME
  CATALOG
  POSTS

  @@map("page_type")
}

model Page {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  seo    Seo?
  blocks Block[]

  type PageType @unique

  @@map("page")
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  heading String
  content String

  type BlockType? @unique

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int?      @unique @map("category_id")
  page       Page?     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId     Int?      @map("page_id")

  @@map("block")
}

model Seo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  type PageType? @unique

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int?      @unique @map("category_id")
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?      @unique @map("post_id")
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int?      @unique @map("product_id")
  page       Page?     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId     Int?      @unique @map("page_id")

  @@map("seo")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status OrderStatus @default(PENDING) @map("order_status")
  total  String

  name  String
  phone String

  items OrderItem[]

  @@map("order")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int

  color String?
  size  String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int   @map("order_id")

  productId Int @map("product_id")

  @@map("order_item")
}

model Billing {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  firstName String @map("first_name")
  city      String
  address   String
  phone     String

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int     @unique @map("profile_id")

  @@map("billing")
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  login      String @unique
  email      String @unique
  password   String
  avatarPath String @default("/images/other/auth/no-user.svg") @map("avatar_path")

  billing Billing?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique @map("user_id")

  @@map("address")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile Profile?

  role       UserRole @default(USER)
  isVerified Boolean  @default(false) @map("is_verified")

  @@map("user")
}

model Holiday {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]

  status Status @default(HIDDEN)

  @@map("holiday")
}

model Collection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]

  status Status @default(HIDDEN)

  @@map("collection")
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String @unique
  slug      String @unique
  imagePath String @map("image_path")

  products Product[]

  status Status @default(HIDDEN)

  @@map("tag")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  imagePath String?

  products Product[]
  block    Block?
  seo      Seo?

  categories Category[] @relation("ParentCategories")

  parent   Category? @relation("ParentCategories", fields: [parentId], references: [id])
  parentId Int?      @map("parent_id")

  status Status @default(HIDDEN)

  @@map("category")
}

model Type {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  iconPath          String  @map("icon_path")
  uncheckedIconPath String? @map("unchecked_icon_path")

  products Product[]

  status Status @default(HIDDEN)

  @@map("type")
}

model Size {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  size     String
  price    String
  oldPrice String? @map("old_price")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  @@map("size")
}

model Color {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  color  String
  images String[]

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  @@map("color")
}

model Characteristic {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String             @unique
  slug String             @unique
  type CharacteristicType @default(COLLECTION)

  products Product[]

  status Status @default(HIDDEN)

  @@map("characteristic")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String   @unique
  slug        String   @unique
  sku         String
  iconPath    String?  @map("icon_path")
  description String
  images      String[]

  packageQuantity Int     @default(100) @map("package_quantity")
  price           String  @default("100.00")
  oldPrice        String? @map("old_price")

  sizes           Size[]
  colors          Color[]
  characteristics Characteristic[]
  orderItems      OrderItem[]

  views       Int @default(0)
  boughtTimes Int @default(0) @map("bought_times")

  types       Type[]
  categories  Category[]
  tags        Tag[]
  holidays    Holiday[]
  collections Collection[]
  seo         Seo?

  status Status @default(HIDDEN)

  typeId Int? @map("type_id")

  @@map("product")
}

model Rubric {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  posts Post[]

  status Status @default(HIDDEN)

  @@map("rubric")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String @unique
  slug        String @unique
  excerpt     String
  description String
  poster      String
  bigPoster   String @map("big_poster")

  rubrics Rubric[]
  seo     Seo?

  status Status @default(HIDDEN)

  @@map("post")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author  String
  photo   String
  content String

  status Status @default(HIDDEN)

  @@map("review")
}

model ShippingAndPayment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  shippingName    String @map("shipping_name")
  shippingContent String @map("shipping_content")
  paymentName     String @map("payment_name")
  paymentContent  String @map("payment_content")

  @@map("shipping_and_payment")
}

model ForBuyers {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  content String

  @@map("for_buyers")
}

model About {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  content String

  @@map("about")
}
